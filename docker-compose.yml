version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: demo-back # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/demo
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres     
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
      
  # Frontend Service 
  app-client:
    build:
      context: demo-front # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - "4200:4200" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    volumes:
      - "./demo-front:/app"
      - "/app/node_modules"
    depends_on:
      - app-server
    networks:
      - frontend  

# Database Service (Mysql)
#  db:
#    image: mysql:5.7
#    ports:
#      - "3306:3306"
#    restart: always
#    environment:
#      MYSQL_DATABASE: polls
#      MYSQL_USER: callicoder
#      MYSQL_PASSWORD: callicoder
#      MYSQL_ROOT_PASSWORD: root
#    volumes:
#      - db-data:/var/lib/mysql
#    networks:
#      - backend  

# Database Service (postgresql)
  db:
   image: postgres
   ports:
     - "5432:5432"
   restart: unless-stopped
   environment:
     POSTGRES_USER: postgres
     POSTGRES_PASSWORD: postgres
     PGDATA: /data/postgres
   volumes:
     - db-data:/data/postgres
   networks:
     - backend  
  
# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: